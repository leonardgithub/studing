
https://en.wikipedia.org/wiki/Database_index
Index implementations
Indices can be implemented using a variety of data structures. Popular indices include balanced trees, B+ trees and hashes.[4]
only one clustered index can be created on a given database table.

mysql覆盖索引与回表
InnoDB聚集索引的叶子节点存储行记录，因此， InnoDB必须要有，且只有一个聚集索引：
（1）如果表定义了PK，则PK就是聚集索引；
（2）如果表没有定义PK，则第一个not NULL unique列是聚集索引；
（3）否则，InnoDB会创建一个隐藏的row-id作为聚集索引；
所以PK查询非常快，直接定位行记录。
InnoDB普通索引的叶子节点存储主键值。

两个B+树索引分别如上图：
（1）id为PK，聚集索引，叶子节点存储行记录；
（2）name为KEY，普通索引，叶子节点存储PK值，即id；
既然从普通索引无法直接定位行记录，那普通索引的查询过程是怎么样的呢？
通常情况下，需要回表查询。
如粉红色路径：
（1）先通过普通索引定位到主键值id=5；
（2）在通过聚集索引定位到行记录；


covering index (覆盖索引)，即无需回表查询 (additional lookup/seek)

MySQL官网，类似的说法出现在explain查询计划优化章节，即explain的输出结果Extra字段为Using index时，能够触发索引覆盖。

只需要在一棵索引树上就能获取SQL所需的所有列数据，无需回表，速度更快。

create table user (
id int primary key,
name varchar(20),
sex varchar(5),
index(name)
) engine=innodb;
# extra为using index无需回表查询
select id, name from user where name='shenjian';
# extra为using index condition，需要回表查询，因为sex字段需要去clustered index去查。如果把(name)单列索引升级为联合索引(name, sex)就可以实现covering index
select id, name, sex from user where name='shenjian';
